
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 21 14:49:14 ICT 2021
//----------------------------------------------------

package src;

import java.util.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 21 14:49:14 ICT 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\016\003\000\002\002\004\000\002\017" +
    "\003\000\002\013\004\000\002\013\004\000\002\007\003" +
    "\000\002\012\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\003\000\002\020\003\000\002\021\003\000\002" +
    "\014\004\000\002\014\004\000\002\015\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\004\050\007\001\002\000\004\002\032\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "\000\014\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\001" +
    "\002\000\014\052\012\053\014\054\016\055\011\056\022" +
    "\001\002\000\010\052\ufff6\053\ufff6\054\ufff6\001\002\000" +
    "\006\002\ufff0\051\ufff0\001\002\000\006\002\ufffd\051\026" +
    "\001\002\000\006\002\ufff2\051\ufff2\001\002\000\014\052" +
    "\012\053\014\054\016\055\011\056\022\001\002\000\006" +
    "\002\ufff1\051\ufff1\001\002\000\004\002\ufffe\001\002\000" +
    "\006\002\ufff8\051\ufff8\001\002\000\010\052\012\053\014" +
    "\054\016\001\002\000\014\052\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\001\002\000\006\002\ufff9\051\ufff9\001\002" +
    "\000\006\002\ufffa\051\ufffa\001\002\000\014\052\012\053" +
    "\014\054\016\055\011\056\022\001\002\000\014\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002\000\004\002" +
    "\ufffb\001\002\000\006\002\ufff5\051\026\001\002\000\004" +
    "\002\ufff4\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\012\007\007\013\004\016\003\017\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\017\011\012\012\016\020" +
    "\014\021\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\026\015\024\001\001\000\002\001\001\000" +
    "\012\010\017\011\023\020\014\021\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\017\011\027\012\030\020\014\021" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\026\015\024\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // noun ::= NOUN_LITERAL 
            {
              Noun RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Noun(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // noun ::= ATTRIBUTE_LITERAL 
            {
              Noun RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Noun("attribute", a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // noun ::= TABLE_LITERAL 
            {
              Noun RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Noun("table", t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noun",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // preposition ::= PREPOSITION_LITERAL 
            {
              Preposition RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Preposition(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preposition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // prepositional_phrase ::= preposition noun_phrase_mixed 
            {
              PP RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Preposition p = (Preposition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NPMixed np = (NPMixed)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PP(p, np); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prepositional_phrase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // prepositional_phrase ::= preposition noun_phrase 
            {
              PP RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Preposition p = (Preposition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NP np = (NP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PP(p, np); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prepositional_phrase",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // adjective ::= ADJ_LITERAL 
            {
              Adjective RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Adjective(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("adjective",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // determiner ::= DET_LITERAL 
            {
              Det RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Det(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("determiner",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // noun_phrase ::= noun 
            {
              NP RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Noun n = (Noun)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NP(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noun_phrase",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // noun_phrase ::= adjective noun 
            {
              NP RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Adjective a = (Adjective)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Noun n = (Noun)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NP(a, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noun_phrase",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // noun_phrase ::= determiner noun_phrase 
            {
              NP RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Det d = (Det)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NP np = (NP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NP(d, np); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noun_phrase",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // noun_phrase_mixed ::= noun_phrase prepositional_phrase 
            {
              NPMixed RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NP np = (NP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PP pp = (PP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NPMixed(np, pp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("noun_phrase_mixed",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // verb ::= VERB_LITERAL 
            {
              Verb RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Verb(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("verb",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // verb_phrase ::= verb noun_phrase 
            {
              VP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Verb v = (Verb)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NP np = (NP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new VP(v, np);
                        System.out.println("hello from new new new brand new VP");
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("verb_phrase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // verb_phrase ::= verb noun_phrase_mixed 
            {
              VP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Verb v = (Verb)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NPMixed np = (NPMixed)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new VP(v, np);
                        System.out.println("hello from VP");
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("verb_phrase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentence ::= verb_phrase 
            {
              Sentence RESULT =null;
		int vpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VP vp = (VP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		      RESULT = new Sentence(vp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= sentence 
            {
              Program RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  RESULT = new Program(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

